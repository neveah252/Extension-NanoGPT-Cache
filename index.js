/* NanoGPT Claude Prompt Cache v1.5.0 (Hover Hotspot) */
const MODULE_NAME='nanogpt_cache';const defaultSettings=Object.freeze({enabled:true,ttl:'5m',onlyClaude:true,onlyWhenNanoGPT:true,urlSubstring:'nanogpt',hotspotEnabled:true,hotspotPos:{x:null,y:null}});function ctx(){return SillyTavern?.getContext?.()}function clone(v){return JSON.parse(JSON.stringify(v))}function getSettings(){const c=ctx();if(!c)return clone(defaultSettings);const store=c.extensionSettings||(c.extensionSettings={});if(!store[MODULE_NAME])store[MODULE_NAME]=clone(defaultSettings);for(const k of Object.keys(defaultSettings)){if(!Object.hasOwn(store[MODULE_NAME],k))store[MODULE_NAME][k]=clone(defaultSettings[k])}return store[MODULE_NAME]}function saveSettings(){try{ctx()?.saveSettingsDebounced?.()}catch{}}function apiMatchesNanoGPT(apiUrl,substr){if(!apiUrl)return false;const needle=(substr||'').toLowerCase();try{const u=new URL(apiUrl);return u.hostname.toLowerCase().includes(needle)||u.href.toLowerCase().includes(needle)}catch{return apiUrl.toLowerCase().includes(needle)}}function installPatch(){const c=ctx();const svc=c?.ConnectionManagerRequestService;if(!svc||typeof svc.sendRequest!=='function'){console.warn('[NanoGPT-Cache] ConnectionManagerRequestService.sendRequest not found.');return}if(svc.__ngptc_patched)return;const original=svc.sendRequest.bind(svc);svc.sendRequest=async function patchedSendRequest(profileId,prompt,maxTokens,custom,overridePayload={}){try{const s=getSettings();if(s.enabled){const profiles=c.profiles;const profile=profiles?.[profileId]||{};const model=String(profile.model||'');const apiUrl=String(profile['api-url']||'');const isClaude=/claude/i.test(model);const nanoOk=s.onlyWhenNanoGPT?apiMatchesNanoGPT(apiUrl,s.urlSubstring):true;if(nanoOk&&(!s.onlyClaude||isClaude)){overridePayload={...overridePayload,cache_control:{enabled:true,ttl:s.ttl||'5m'}}}}}catch(e){console.warn('[NanoGPT-Cache] failed to prepare overridePayload',e)}return original(profileId,prompt,maxTokens,custom,overridePayload)};svc.__ngptc_patched=true;console.log('[NanoGPT-Cache] sendRequest() patched')}function buildSettingsContent(container){const s=getSettings();container.innerHTML=`
    <div class="ngptc-body">
      <label class="row"><input type="checkbox" data-k="enabled"> Enable cache_control</label>
      <label class="row">TTL <input type="text" data-k="ttl" placeholder="5m or 1h"></label>
      <label class="row"><input type="checkbox" data-k="onlyClaude"> Only when model looks like Claude</label>
      <label class="row">
        <input type="checkbox" data-k="onlyWhenNanoGPT"> Only when API URL contains/host
        <input type="text" class="sub" data-k="urlSubstring" placeholder="nanogpt">
      </label>
      <label class="row"><input type="checkbox" data-k="hotspotEnabled"> Show hover hotspot</label>
    </div>
  `;container.querySelector('[data-k="enabled"]').checked=!!s.enabled;container.querySelector('[data-k="ttl"]').value=s.ttl||'5m';container.querySelector('[data-k="onlyClaude"]').checked=!!s.onlyClaude;container.querySelector('[data-k="onlyWhenNanoGPT"]').checked=!!s.onlyWhenNanoGPT;container.querySelector('[data-k="urlSubstring"]').value=s.urlSubstring||'nanogpt';container.querySelector('[data-k="hotspotEnabled"]').checked=!!s.hotspotEnabled;container.querySelectorAll('[data-k]').forEach(el=>{el.addEventListener(el.type==='checkbox'?'change':'input',()=>{const key=el.getAttribute('data-k');const val=(el.type==='checkbox')?!!el.checked:(el.value||'').trim();const st=getSettings();st[key]=val;saveSettings();if(key==='hotspotEnabled')syncHotspotVisibility()})})}function mountDrawerPanel(){const c=ctx();const getSec=c?.getExtensionSection;if(typeof getSec!=='function')return false;const container=getSec(MODULE_NAME,'NanoGPT Prompt Cache');if(!container)return false;container.innerHTML='';const wrap=document.createElement('div');wrap.className='ngptc-wrap';buildSettingsContent(wrap);container.appendChild(wrap);return true}let hotspot,card;function ensureHotspot(){if(hotspot||card)return;hotspot=document.createElement('div');hotspot.className='ngptc-hotspot';hotspot.title='NanoGPT Cache Settings (hover)';card=document.createElement('div');card.className='ngptc-card';card.innerHTML=`
    <div class="ngptc-title">NanoGPT Prompt Cache</div>
    <div class="ngptc-inner"></div>
  `;document.body.append(hotspot,card);buildSettingsContent(card.querySelector('.ngptc-inner'));positionFromSettings();hotspot.addEventListener('mouseenter',()=>{card.classList.add('open')});hotspot.addEventListener('mouseleave',()=>{if(!card.matches(':hover'))card.classList.remove('open')});card.addEventListener('mouseleave',()=>card.classList.remove('open'));let dragging=false,sx=0,sy=0,startR=0,startB=0;hotspot.addEventListener('mousedown',e=>{if(!e.altKey)return;dragging=true;sx=e.clientX;sy=e.clientY;const rect=hotspot.getBoundingClientRect();startR=Math.max(0,window.innerWidth-rect.right);startB=Math.max(0,window.innerHeight-rect.bottom);e.preventDefault()});window.addEventListener('mousemove',e=>{if(!dragging)return;const dx=e.clientX-sx,dy=e.clientY-sy;const r=Math.max(4,startR-dx),b=Math.max(4,startB-dy);hotspot.style.right=r+'px';hotspot.style.bottom=b+'px';card.style.right=r+'px';card.style.bottom=b+10+'px'});window.addEventListener('mouseup',()=>{if(!dragging)return;dragging=false;persistHotspotPos()});syncHotspotVisibility()}function positionFromSettings(){const s=getSettings();const r=(s.hotspotPos?.x==null)?8:s.hotspotPos.x;const b=(s.hotspotPos?.y==null)?8:s.hotspotPos.y;if(hotspot){hotspot.style.right=r+'px';hotspot.style.bottom=b+'px'}if(card){card.style.right=r+'px';card.style.bottom=b+10+'px'}}function persistHotspotPos(){const rect=hotspot.getBoundingClientRect();const r=Math.max(4,Math.round(window.innerWidth-rect.right));const b=Math.max(4,Math.round(window.innerHeight-rect.bottom));const s=getSettings();s.hotspotPos={x:r,y:b};saveSettings()}function syncHotspotVisibility(){const s=getSettings();if(hotspot)hotspot.style.display=s.hotspotEnabled?'block':'none';if(!s.hotspotEnabled&&card)card.classList.remove('open')}function init(){const link=document.createElement('link');link.rel='stylesheet';link.href='style.css';document.head.appendChild(link);installPatch();mountDrawerPanel();ensureHotspot()}if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',init)}else{init()}